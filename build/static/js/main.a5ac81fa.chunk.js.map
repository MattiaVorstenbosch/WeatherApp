{"version":3,"sources":["CitySearch.tsx","WeatherResults.tsx","App.tsx","index.tsx"],"names":["Form","styled","form","Label","label","Input","input","SubmitCityBtn","button","CitySearch","onChangeHandler","onClickHandler","htmlFor","id","type","placeholder","required","onChange","onClick","StyledResults","div","Image","img","WeatherResults","city","weather","icon","src","alt","StyledApp","Error","h3","DEFAULT_WEATHER","main","description","fetchWeather","a","fetch","then","res","json","response","App","useState","setCity","setWeather","WeatherImage","setWeatherImage","error","setError","handleClick","event","preventDefault","useEffect","url","catch","err","console","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wtCAGA,IAAMA,EAAOC,IAAOC,KAAV,KAYJC,EAAQF,IAAOG,MAAV,KAOLC,EAAQJ,IAAOK,MAAV,KAWLC,EAAgBN,IAAOO,OAAV,KA2CJC,EArB+B,SAAC,GAGxC,IAFLC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAEA,OACE,kBAACX,EAAD,KACE,kBAACG,EAAD,CAAOS,QAAQ,SAAf,uCACA,kBAACP,EAAD,CACEQ,GAAG,QACHC,KAAK,OACLC,YAAY,OACZC,UAAQ,EACRC,SAAUP,IAEZ,kBAACH,EAAD,CAAeO,KAAK,SAASI,QAASP,GAAtC,0B,gWC3DN,IAAMQ,EAAgBlB,IAAOmB,IAAV,KAWbC,EAAQpB,IAAOqB,IAAV,KAoBIC,EAfuC,SAAC,GAKhD,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAX,EAEI,EAFJA,KACAY,EACI,EADJA,KAEA,OACE,kBAACP,EAAD,KACE,4BAAKK,GACL,kBAACH,EAAD,CAAOM,IAAKD,EAAME,IAAKd,IACvB,4BAAKW,K,idC/BX,IAAMI,EAAY5B,IAAOmB,IAAV,KAaTU,EAAQ7B,IAAO8B,GAAV,KAeLC,EAAiC,CACrCnB,GAAI,EACJoB,KAAM,GACNP,KAAM,GACNQ,YAAa,IAKTC,EAAY,uCAAG,WAAOX,GAAP,eAAAY,EAAA,sEACIC,MAAM,qDAAD,OAC2Bb,EAD3B,kBAHd,qCAKZc,MAAK,SAACC,GAAD,OAASA,EAAIC,UAHD,cACbC,EADa,yBAIZA,EAAShB,SAJG,2CAAH,sDAuDHiB,MAhDf,WAAgB,IAAD,EACWC,mBAAiB,IAD5B,mBACNnB,EADM,KACAoB,EADA,OAEiBD,mBAAwBX,GAFzC,mBAENP,EAFM,KAEGoB,EAFH,OAG2BF,mBAAiB,IAH5C,mBAGNG,EAHM,KAGQC,EAHR,OAIaJ,mBAAwB,MAJrC,mBAINK,EAJM,KAICC,EAJD,KAaPC,EAAW,uCAAG,WAAOC,GAAP,mBAAAf,EAAA,6DAClBe,EAAMC,iBADY,kBAGQjB,EAAaX,GAHrB,mCAGTC,EAHS,KAIhBoB,EAAWpB,GAJK,kDAMhBwB,EAAS,IAAD,OAAKzB,EAAL,sDANQ,0DAAH,sDAkBjB,OARA6B,qBAAU,WACJ5B,EAAQC,MACVW,MAAM,oCAAD,OAAqCZ,EAAQC,KAA7C,YACFY,MAAK,SAACC,GAAD,OAASQ,EAAgBR,EAAIe,QAClCC,OAAM,SAACC,GAAD,OAASC,QAAQT,MAAMQ,QAEjC,CAAC/B,IAGF,kBAACI,EAAD,KACE,kBAAC,EAAD,CAAYnB,gBA3BK,SAACyC,GACpBA,EAAMC,iBACNH,EAAS,MACTL,EAAQO,EAAMO,OAAOC,OACrBd,EAAWb,IAuBkCrB,eAAgBuC,IAC1DF,EACC,kBAAClB,EAAD,KAAQkB,GAER,kBAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EAAQS,YACjBpB,KAAMW,EAAQQ,KACdP,KAAMoB,MCrFhBc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a5ac81fa.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 400px;\n  margin: auto;\n  margin-top: 100px;\n  border-radius: 10px;\n  padding: 20px;\n  background-color: #eee;\n`;\n\nconst Label = styled.label`\n  display: inline-block;\n  color: #000;\n  margin: auto;\n  font-size: 16px;\n`;\n\nconst Input = styled.input`\n  border-radius: 5px;\n  display: inline-block;\n  padding: 5px;\n  height: 20px;\n  width: 300px;\n  margin: 20px auto;\n  font-size: 16px;\n  text-align: center;\n`;\n\nconst SubmitCityBtn = styled.button`\n  display: inline-block;\n  padding: 10px 5px;\n  margin: 10px 5px;\n  border-radius: 10px;\n  background: #00a9e8;\n  color: white;\n  font-size: 16px;\n  &:hover {\n    background-color: #10a2d8;\n    cursor: pointer;\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\ninterface CitySearchProps {\n  onChangeHandler: any;\n  onClickHandler: any;\n}\n\nconst CitySearch: React.FC<CitySearchProps> = ({\n  onChangeHandler,\n  onClickHandler,\n}) => {\n  return (\n    <Form>\n      <Label htmlFor=\"input\">Search for a city to reveal weather</Label>\n      <Input\n        id=\"input\"\n        type=\"text\"\n        placeholder=\"city\"\n        required\n        onChange={onChangeHandler}\n      />\n      <SubmitCityBtn type=\"submit\" onClick={onClickHandler}>\n        Give me the weather!\n      </SubmitCityBtn>\n    </Form>\n  );\n};\n\nexport default CitySearch;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface WeatherResultsProps {\n  city: string;\n  weather: string;\n  type: string;\n  icon: string;\n}\n\nconst StyledResults = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 400px;\n  color: white;\n  font-size: 16px;\n  margin: auto;\n  text-align: center;\n`;\n\nconst Image = styled.img`\n  display: inline-block;\n  margin: auto;\n`;\n\nconst WeatherResults: React.FC<WeatherResultsProps> = ({\n  city,\n  weather,\n  type,\n  icon,\n}) => {\n  return (\n    <StyledResults>\n      <h3>{city}</h3>\n      <Image src={icon} alt={type} />\n      <h1>{weather}</h1>\n    </StyledResults>\n  );\n};\n\nexport default WeatherResults;\n","import React, { useState, useEffect } from \"react\";\nimport CitySearch from \"./CitySearch\";\nimport styled from \"styled-components\";\nimport WeatherResults from \"./WeatherResults\";\n\nconst StyledApp = styled.div`\n  background: rgb(2, 0, 36);\n  background: linear-gradient(\n    11deg,\n    rgba(2, 0, 36, 1) 0%,\n    rgba(9, 91, 121, 1) 35%,\n    rgba(0, 212, 255, 1) 100%\n  );\n  height: 100vh;\n  width: 100vw;\n  position: absolute;\n`;\n\nconst Error = styled.h3`\n  margin: auto;\n  color: white;\n  display: block;\n  text-align: center;\n  margin-top: 20px;\n`;\n\ninterface WeatherObject {\n  id: number;\n  main: string;\n  icon: string;\n  description: string;\n}\n\nconst DEFAULT_WEATHER: WeatherObject = {\n  id: 0,\n  main: \"\",\n  icon: \"\",\n  description: \"\",\n};\n\nconst API_KEY = \"1a52b846b8d6b3bdd0ee90695ddb5afa\";\n\nconst fetchWeather = async (city: String) => {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\n  ).then((res) => res.json());\n  return response.weather;\n};\n\nfunction App() {\n  const [city, setCity] = useState<string>(\"\");\n  const [weather, setWeather] = useState<WeatherObject>(DEFAULT_WEATHER);\n  const [WeatherImage, setWeatherImage] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const handleChange = (event: any) => {\n    event.preventDefault();\n    setError(null);\n    setCity(event.target.value);\n    setWeather(DEFAULT_WEATHER);\n  };\n\n  const handleClick = async (event: any) => {\n    event.preventDefault();\n    try {\n      const [weather] = await fetchWeather(city);\n      setWeather(weather);\n    } catch (e) {\n      setError(`'${city}' is not a valid city, try 'Nijmegen' or 'Boston'`);\n    }\n  };\n\n  useEffect(() => {\n    if (weather.icon) {\n      fetch(`http://openweathermap.org/img/wn/${weather.icon}@2x.png`)\n        .then((res) => setWeatherImage(res.url))\n        .catch((err) => console.error(err));\n    }\n  }, [weather]);\n\n  return (\n    <StyledApp>\n      <CitySearch onChangeHandler={handleChange} onClickHandler={handleClick} />\n      {error ? (\n        <Error>{error}</Error>\n      ) : (\n        <WeatherResults\n          city={city}\n          weather={weather.description}\n          type={weather.main}\n          icon={WeatherImage}\n        />\n      )}\n    </StyledApp>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}